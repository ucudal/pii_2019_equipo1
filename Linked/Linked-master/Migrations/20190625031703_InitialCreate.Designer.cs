// <auto-generated />
using System;
using Linked.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Linked.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20190625031703_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Linked.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Linked.Models.Employ", b =>
                {
                    b.Property<string>("TechnicianID");

                    b.Property<string>("ProjectID");

                    b.HasKey("TechnicianID", "ProjectID");

                    b.HasAlternateKey("ProjectID", "TechnicianID");

                    b.ToTable("Employ");
                });

            modelBuilder.Entity("Linked.Models.FeedBack", b =>
                {
                    b.Property<string>("TechnicianID");

                    b.Property<string>("ScoreSheetID");

                    b.HasKey("TechnicianID", "ScoreSheetID");

                    b.HasAlternateKey("ScoreSheetID", "TechnicianID");

                    b.HasIndex("ScoreSheetID")
                        .IsUnique();

                    b.ToTable("FeedBack");
                });

            modelBuilder.Entity("Linked.Models.Interest", b =>
                {
                    b.Property<string>("TechnicianID");

                    b.Property<string>("ProjectID");

                    b.HasKey("TechnicianID", "ProjectID");

                    b.HasAlternateKey("ProjectID", "TechnicianID");

                    b.ToTable("Interest");
                });

            modelBuilder.Entity("Linked.Models.Project", b =>
                {
                    b.Property<string>("ProjectID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientID");

                    b.Property<bool>("CompletionStatus");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("Level");

                    b.Property<int>("Specialty");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ProjectID");

                    b.HasIndex("ClientID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Linked.Models.Requirement", b =>
                {
                    b.Property<string>("RequirementID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Hourload");

                    b.Property<int>("Level");

                    b.Property<string>("ProjectID")
                        .IsRequired();

                    b.Property<int>("Specialty");

                    b.HasKey("RequirementID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Requirement");
                });

            modelBuilder.Entity("Linked.Models.ScoreSheet", b =>
                {
                    b.Property<string>("ScoreSheetID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Compromiso")
                        .HasMaxLength(2);

                    b.Property<DateTime>("Date");

                    b.Property<int>("Formalidad")
                        .HasMaxLength(2);

                    b.Property<int>("Profesionalismo")
                        .HasMaxLength(2);

                    b.Property<int>("Puntualidad")
                        .HasMaxLength(2);

                    b.Property<int>("Respeto")
                        .HasMaxLength(2);

                    b.HasKey("ScoreSheetID");

                    b.ToTable("ScoreSheet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Linked.Models.Client", b =>
                {
                    b.HasBaseType("Linked.Areas.Identity.Data.ApplicationUser");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Linked.Models.Technician", b =>
                {
                    b.HasBaseType("Linked.Areas.Identity.Data.ApplicationUser");

                    b.Property<int>("Level");

                    b.Property<int>("Specialty");

                    b.HasDiscriminator().HasValue("Technician");
                });

            modelBuilder.Entity("Linked.Models.Employ", b =>
                {
                    b.HasOne("Linked.Models.Project", "Project")
                        .WithMany("Employees")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Linked.Models.Technician", "Technician")
                        .WithMany("Employers")
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Linked.Models.FeedBack", b =>
                {
                    b.HasOne("Linked.Models.ScoreSheet", "ScoreSheet")
                        .WithOne("FeedBack")
                        .HasForeignKey("Linked.Models.FeedBack", "ScoreSheetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Linked.Models.Technician", "Technician")
                        .WithMany("FeedBacks")
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Linked.Models.Interest", b =>
                {
                    b.HasOne("Linked.Models.Project", "Project")
                        .WithMany("InterestedTechnicians")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Linked.Models.Technician", "Technician")
                        .WithMany("InterestingProjects")
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Linked.Models.Project", b =>
                {
                    b.HasOne("Linked.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientID");
                });

            modelBuilder.Entity("Linked.Models.Requirement", b =>
                {
                    b.HasOne("Linked.Models.Project", "Project")
                        .WithMany("Requirements")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Linked.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Linked.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Linked.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Linked.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
