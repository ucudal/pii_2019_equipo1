// <auto-generated />
using System;
using Linked.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Linked.Migrations
{
    [DbContext(typeof(LinkedContext))]
    [Migration("20190619204837_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Linked.Models.Client", b =>
                {
                    b.Property<string>("ClientID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("ClientID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Linked.Models.Employ", b =>
                {
                    b.Property<string>("TechnicianID");

                    b.Property<string>("ProjectID");

                    b.HasKey("TechnicianID", "ProjectID");

                    b.HasAlternateKey("ProjectID", "TechnicianID");

                    b.ToTable("Employ");
                });

            modelBuilder.Entity("Linked.Models.FeedBack", b =>
                {
                    b.Property<string>("TechnicianID");

                    b.Property<string>("ScoreSheetID");

                    b.HasKey("TechnicianID", "ScoreSheetID");

                    b.HasIndex("ScoreSheetID")
                        .IsUnique();

                    b.ToTable("FeedBack");
                });

            modelBuilder.Entity("Linked.Models.Project", b =>
                {
                    b.Property<string>("ProjectID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientID");

                    b.Property<bool>("CompletionStatus");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("Level");

                    b.Property<int>("Specialty");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("ProjectID");

                    b.HasIndex("ClientID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Linked.Models.ScoreSheet", b =>
                {
                    b.Property<string>("ScoreSheetID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Compromiso")
                        .HasMaxLength(2);

                    b.Property<DateTime>("Date");

                    b.Property<int>("Formalidad")
                        .HasMaxLength(2);

                    b.Property<int>("Profesionalismo")
                        .HasMaxLength(2);

                    b.Property<int>("Puntualidad")
                        .HasMaxLength(2);

                    b.Property<int>("Respeto")
                        .HasMaxLength(2);

                    b.HasKey("ScoreSheetID");

                    b.ToTable("ScoreSheet");
                });

            modelBuilder.Entity("Linked.Models.Technician", b =>
                {
                    b.Property<string>("TechnicianID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday");

                    b.Property<int>("Level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("Specialty");

                    b.HasKey("TechnicianID");

                    b.ToTable("Technician");
                });

            modelBuilder.Entity("Linked.Models.Employ", b =>
                {
                    b.HasOne("Linked.Models.Project", "Project")
                        .WithMany("Employees")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Linked.Models.Technician", "Technician")
                        .WithMany("Employers")
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Linked.Models.FeedBack", b =>
                {
                    b.HasOne("Linked.Models.ScoreSheet", "ScoreSheet")
                        .WithOne("FeedBack")
                        .HasForeignKey("Linked.Models.FeedBack", "ScoreSheetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Linked.Models.Technician", "Technician")
                        .WithMany("FeedBacks")
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Linked.Models.Project", b =>
                {
                    b.HasOne("Linked.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientID");
                });
#pragma warning restore 612, 618
        }
    }
}
